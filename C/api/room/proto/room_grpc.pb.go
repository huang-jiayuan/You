// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: room.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Room_Stream_FullMethodName               = "/room.Room/Stream"
	Room_SendGifts_FullMethodName            = "/room.Room/SendGifts"
	Room_SetAdmin_FullMethodName             = "/room.Room/SetAdmin"
	Room_Greet_FullMethodName                = "/room.Room/greet"
	Room_JoinRoom_FullMethodName             = "/room.Room/JoinRoom"
	Room_CloseRoom_FullMethodName            = "/room.Room/CloseRoom"
	Room_UpdateRoom_FullMethodName           = "/room.Room/UpdateRoom"
	Room_CreateRoom_FullMethodName           = "/room.Room/CreateRoom"
	Room_GetRecommendRooms_FullMethodName    = "/room.Room/GetRecommendRooms"
	Room_GetRoomsByCategory_FullMethodName   = "/room.Room/GetRoomsByCategory"
	Room_SearchRooms_FullMethodName          = "/room.Room/SearchRooms"
	Room_ApplyMic_FullMethodName             = "/room.Room/ApplyMic"
	Room_HandleMicApplication_FullMethodName = "/room.Room/HandleMicApplication"
	Room_LeaveMic_FullMethodName             = "/room.Room/LeaveMic"
	Room_KickFromMic_FullMethodName          = "/room.Room/KickFromMic"
	Room_MuteMicUser_FullMethodName          = "/room.Room/MuteMicUser"
	Room_GetMicStatus_FullMethodName         = "/room.Room/GetMicStatus"
)

// RoomClient is the client API for Room service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomClient interface {
	Stream(ctx context.Context, in *StreamReq, opts ...grpc.CallOption) (*StreamResp, error)
	SendGifts(ctx context.Context, in *SendGiftsReq, opts ...grpc.CallOption) (*SendGiftsResp, error)
	SetAdmin(ctx context.Context, in *SetAdminReq, opts ...grpc.CallOption) (*SetAdminResp, error)
	Greet(ctx context.Context, in *StreamReq, opts ...grpc.CallOption) (*StreamResp, error)
	JoinRoom(ctx context.Context, in *JoinRoomStreamReq, opts ...grpc.CallOption) (*JoinRoomStreamResp, error)
	CloseRoom(ctx context.Context, in *CloseRoomStreamReq, opts ...grpc.CallOption) (*CloseRoomStreamResp, error)
	UpdateRoom(ctx context.Context, in *UpdateRoomStreamReq, opts ...grpc.CallOption) (*UpdateRoomStreamResp, error)
	CreateRoom(ctx context.Context, in *CreateRoomStreamReq, opts ...grpc.CallOption) (*CreateRoomStreamResp, error)
	GetRecommendRooms(ctx context.Context, in *GetRecommendRoomsReq, opts ...grpc.CallOption) (*GetRecommendRoomsResp, error)
	GetRoomsByCategory(ctx context.Context, in *GetRoomsByCategoryReq, opts ...grpc.CallOption) (*GetRoomsByCategoryResp, error)
	SearchRooms(ctx context.Context, in *SearchRoomsReq, opts ...grpc.CallOption) (*SearchRoomsResp, error)
	// 麦位管理相关RPC方法
	ApplyMic(ctx context.Context, in *ApplyMicReq, opts ...grpc.CallOption) (*ApplyMicResp, error)
	HandleMicApplication(ctx context.Context, in *HandleMicApplicationReq, opts ...grpc.CallOption) (*HandleMicApplicationResp, error)
	LeaveMic(ctx context.Context, in *LeaveMicReq, opts ...grpc.CallOption) (*LeaveMicResp, error)
	KickFromMic(ctx context.Context, in *KickFromMicReq, opts ...grpc.CallOption) (*KickFromMicResp, error)
	MuteMicUser(ctx context.Context, in *MuteMicUserReq, opts ...grpc.CallOption) (*MuteMicUserResp, error)
	GetMicStatus(ctx context.Context, in *GetMicStatusReq, opts ...grpc.CallOption) (*GetMicStatusResp, error)
}

type roomClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomClient(cc grpc.ClientConnInterface) RoomClient {
	return &roomClient{cc}
}

func (c *roomClient) Stream(ctx context.Context, in *StreamReq, opts ...grpc.CallOption) (*StreamResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamResp)
	err := c.cc.Invoke(ctx, Room_Stream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) SendGifts(ctx context.Context, in *SendGiftsReq, opts ...grpc.CallOption) (*SendGiftsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendGiftsResp)
	err := c.cc.Invoke(ctx, Room_SendGifts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) SetAdmin(ctx context.Context, in *SetAdminReq, opts ...grpc.CallOption) (*SetAdminResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAdminResp)
	err := c.cc.Invoke(ctx, Room_SetAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) Greet(ctx context.Context, in *StreamReq, opts ...grpc.CallOption) (*StreamResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamResp)
	err := c.cc.Invoke(ctx, Room_Greet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) JoinRoom(ctx context.Context, in *JoinRoomStreamReq, opts ...grpc.CallOption) (*JoinRoomStreamResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinRoomStreamResp)
	err := c.cc.Invoke(ctx, Room_JoinRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) CloseRoom(ctx context.Context, in *CloseRoomStreamReq, opts ...grpc.CallOption) (*CloseRoomStreamResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseRoomStreamResp)
	err := c.cc.Invoke(ctx, Room_CloseRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) UpdateRoom(ctx context.Context, in *UpdateRoomStreamReq, opts ...grpc.CallOption) (*UpdateRoomStreamResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRoomStreamResp)
	err := c.cc.Invoke(ctx, Room_UpdateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) CreateRoom(ctx context.Context, in *CreateRoomStreamReq, opts ...grpc.CallOption) (*CreateRoomStreamResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoomStreamResp)
	err := c.cc.Invoke(ctx, Room_CreateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) GetRecommendRooms(ctx context.Context, in *GetRecommendRoomsReq, opts ...grpc.CallOption) (*GetRecommendRoomsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecommendRoomsResp)
	err := c.cc.Invoke(ctx, Room_GetRecommendRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) GetRoomsByCategory(ctx context.Context, in *GetRoomsByCategoryReq, opts ...grpc.CallOption) (*GetRoomsByCategoryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomsByCategoryResp)
	err := c.cc.Invoke(ctx, Room_GetRoomsByCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) SearchRooms(ctx context.Context, in *SearchRoomsReq, opts ...grpc.CallOption) (*SearchRoomsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchRoomsResp)
	err := c.cc.Invoke(ctx, Room_SearchRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) ApplyMic(ctx context.Context, in *ApplyMicReq, opts ...grpc.CallOption) (*ApplyMicResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyMicResp)
	err := c.cc.Invoke(ctx, Room_ApplyMic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) HandleMicApplication(ctx context.Context, in *HandleMicApplicationReq, opts ...grpc.CallOption) (*HandleMicApplicationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleMicApplicationResp)
	err := c.cc.Invoke(ctx, Room_HandleMicApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) LeaveMic(ctx context.Context, in *LeaveMicReq, opts ...grpc.CallOption) (*LeaveMicResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveMicResp)
	err := c.cc.Invoke(ctx, Room_LeaveMic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) KickFromMic(ctx context.Context, in *KickFromMicReq, opts ...grpc.CallOption) (*KickFromMicResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KickFromMicResp)
	err := c.cc.Invoke(ctx, Room_KickFromMic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) MuteMicUser(ctx context.Context, in *MuteMicUserReq, opts ...grpc.CallOption) (*MuteMicUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MuteMicUserResp)
	err := c.cc.Invoke(ctx, Room_MuteMicUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) GetMicStatus(ctx context.Context, in *GetMicStatusReq, opts ...grpc.CallOption) (*GetMicStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMicStatusResp)
	err := c.cc.Invoke(ctx, Room_GetMicStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomServer is the server API for Room service.
// All implementations must embed UnimplementedRoomServer
// for forward compatibility.
type RoomServer interface {
	Stream(context.Context, *StreamReq) (*StreamResp, error)
	SendGifts(context.Context, *SendGiftsReq) (*SendGiftsResp, error)
	SetAdmin(context.Context, *SetAdminReq) (*SetAdminResp, error)
	Greet(context.Context, *StreamReq) (*StreamResp, error)
	JoinRoom(context.Context, *JoinRoomStreamReq) (*JoinRoomStreamResp, error)
	CloseRoom(context.Context, *CloseRoomStreamReq) (*CloseRoomStreamResp, error)
	UpdateRoom(context.Context, *UpdateRoomStreamReq) (*UpdateRoomStreamResp, error)
	CreateRoom(context.Context, *CreateRoomStreamReq) (*CreateRoomStreamResp, error)
	GetRecommendRooms(context.Context, *GetRecommendRoomsReq) (*GetRecommendRoomsResp, error)
	GetRoomsByCategory(context.Context, *GetRoomsByCategoryReq) (*GetRoomsByCategoryResp, error)
	SearchRooms(context.Context, *SearchRoomsReq) (*SearchRoomsResp, error)
	// 麦位管理相关RPC方法
	ApplyMic(context.Context, *ApplyMicReq) (*ApplyMicResp, error)
	HandleMicApplication(context.Context, *HandleMicApplicationReq) (*HandleMicApplicationResp, error)
	LeaveMic(context.Context, *LeaveMicReq) (*LeaveMicResp, error)
	KickFromMic(context.Context, *KickFromMicReq) (*KickFromMicResp, error)
	MuteMicUser(context.Context, *MuteMicUserReq) (*MuteMicUserResp, error)
	GetMicStatus(context.Context, *GetMicStatusReq) (*GetMicStatusResp, error)
	mustEmbedUnimplementedRoomServer()
}

// UnimplementedRoomServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoomServer struct{}

func (UnimplementedRoomServer) Stream(context.Context, *StreamReq) (*StreamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedRoomServer) SendGifts(context.Context, *SendGiftsReq) (*SendGiftsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGifts not implemented")
}
func (UnimplementedRoomServer) SetAdmin(context.Context, *SetAdminReq) (*SetAdminResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAdmin not implemented")
}
func (UnimplementedRoomServer) Greet(context.Context, *StreamReq) (*StreamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greet not implemented")
}
func (UnimplementedRoomServer) JoinRoom(context.Context, *JoinRoomStreamReq) (*JoinRoomStreamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedRoomServer) CloseRoom(context.Context, *CloseRoomStreamReq) (*CloseRoomStreamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseRoom not implemented")
}
func (UnimplementedRoomServer) UpdateRoom(context.Context, *UpdateRoomStreamReq) (*UpdateRoomStreamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoom not implemented")
}
func (UnimplementedRoomServer) CreateRoom(context.Context, *CreateRoomStreamReq) (*CreateRoomStreamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedRoomServer) GetRecommendRooms(context.Context, *GetRecommendRoomsReq) (*GetRecommendRoomsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendRooms not implemented")
}
func (UnimplementedRoomServer) GetRoomsByCategory(context.Context, *GetRoomsByCategoryReq) (*GetRoomsByCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomsByCategory not implemented")
}
func (UnimplementedRoomServer) SearchRooms(context.Context, *SearchRoomsReq) (*SearchRoomsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRooms not implemented")
}
func (UnimplementedRoomServer) ApplyMic(context.Context, *ApplyMicReq) (*ApplyMicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyMic not implemented")
}
func (UnimplementedRoomServer) HandleMicApplication(context.Context, *HandleMicApplicationReq) (*HandleMicApplicationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMicApplication not implemented")
}
func (UnimplementedRoomServer) LeaveMic(context.Context, *LeaveMicReq) (*LeaveMicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveMic not implemented")
}
func (UnimplementedRoomServer) KickFromMic(context.Context, *KickFromMicReq) (*KickFromMicResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickFromMic not implemented")
}
func (UnimplementedRoomServer) MuteMicUser(context.Context, *MuteMicUserReq) (*MuteMicUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteMicUser not implemented")
}
func (UnimplementedRoomServer) GetMicStatus(context.Context, *GetMicStatusReq) (*GetMicStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMicStatus not implemented")
}
func (UnimplementedRoomServer) mustEmbedUnimplementedRoomServer() {}
func (UnimplementedRoomServer) testEmbeddedByValue()              {}

// UnsafeRoomServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomServer will
// result in compilation errors.
type UnsafeRoomServer interface {
	mustEmbedUnimplementedRoomServer()
}

func RegisterRoomServer(s grpc.ServiceRegistrar, srv RoomServer) {
	// If the following call pancis, it indicates UnimplementedRoomServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Room_ServiceDesc, srv)
}

func _Room_Stream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).Stream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_Stream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).Stream(ctx, req.(*StreamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_SendGifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGiftsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).SendGifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_SendGifts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).SendGifts(ctx, req.(*SendGiftsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_SetAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).SetAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_SetAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).SetAdmin(ctx, req.(*SetAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_Greet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).Greet(ctx, req.(*StreamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomStreamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_JoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).JoinRoom(ctx, req.(*JoinRoomStreamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_CloseRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRoomStreamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).CloseRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_CloseRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).CloseRoom(ctx, req.(*CloseRoomStreamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_UpdateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoomStreamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).UpdateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_UpdateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).UpdateRoom(ctx, req.(*UpdateRoomStreamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomStreamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).CreateRoom(ctx, req.(*CreateRoomStreamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_GetRecommendRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendRoomsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).GetRecommendRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_GetRecommendRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).GetRecommendRooms(ctx, req.(*GetRecommendRoomsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_GetRoomsByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomsByCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).GetRoomsByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_GetRoomsByCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).GetRoomsByCategory(ctx, req.(*GetRoomsByCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_SearchRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRoomsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).SearchRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_SearchRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).SearchRooms(ctx, req.(*SearchRoomsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_ApplyMic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyMicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).ApplyMic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_ApplyMic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).ApplyMic(ctx, req.(*ApplyMicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_HandleMicApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleMicApplicationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).HandleMicApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_HandleMicApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).HandleMicApplication(ctx, req.(*HandleMicApplicationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_LeaveMic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveMicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).LeaveMic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_LeaveMic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).LeaveMic(ctx, req.(*LeaveMicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_KickFromMic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickFromMicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).KickFromMic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_KickFromMic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).KickFromMic(ctx, req.(*KickFromMicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_MuteMicUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuteMicUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).MuteMicUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_MuteMicUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).MuteMicUser(ctx, req.(*MuteMicUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_GetMicStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMicStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).GetMicStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_GetMicStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).GetMicStatus(ctx, req.(*GetMicStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Room_ServiceDesc is the grpc.ServiceDesc for Room service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Room_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "room.Room",
	HandlerType: (*RoomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stream",
			Handler:    _Room_Stream_Handler,
		},
		{
			MethodName: "SendGifts",
			Handler:    _Room_SendGifts_Handler,
		},
		{
			MethodName: "SetAdmin",
			Handler:    _Room_SetAdmin_Handler,
		},
		{
			MethodName: "greet",
			Handler:    _Room_Greet_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _Room_JoinRoom_Handler,
		},
		{
			MethodName: "CloseRoom",
			Handler:    _Room_CloseRoom_Handler,
		},
		{
			MethodName: "UpdateRoom",
			Handler:    _Room_UpdateRoom_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _Room_CreateRoom_Handler,
		},
		{
			MethodName: "GetRecommendRooms",
			Handler:    _Room_GetRecommendRooms_Handler,
		},
		{
			MethodName: "GetRoomsByCategory",
			Handler:    _Room_GetRoomsByCategory_Handler,
		},
		{
			MethodName: "SearchRooms",
			Handler:    _Room_SearchRooms_Handler,
		},
		{
			MethodName: "ApplyMic",
			Handler:    _Room_ApplyMic_Handler,
		},
		{
			MethodName: "HandleMicApplication",
			Handler:    _Room_HandleMicApplication_Handler,
		},
		{
			MethodName: "LeaveMic",
			Handler:    _Room_LeaveMic_Handler,
		},
		{
			MethodName: "KickFromMic",
			Handler:    _Room_KickFromMic_Handler,
		},
		{
			MethodName: "MuteMicUser",
			Handler:    _Room_MuteMicUser_Handler,
		},
		{
			MethodName: "GetMicStatus",
			Handler:    _Room_GetMicStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "room.proto",
}
